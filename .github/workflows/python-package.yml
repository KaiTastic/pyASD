# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "master", "main" ]  # Support both branch naming conventions
  pull_request:
    branches: [ "master", "main" ]

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: requirements-dev.txt
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip --quiet
        python -m pip install flake8 black isort --quiet
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]  # Stable versions only

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # Enable pip caching
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel --quiet
        python -m pip install -r requirements-dev.txt --quiet
    
    - name: Install project in development mode
      run: python -m pip install -e . --quiet

    - name: Run tests with detailed reporting
      run: |
        python -m pytest tests/ --html=test-report-${{ matrix.os }}-py${{ matrix.python-version }}.html --self-contained-html --cov=src --cov-report=xml --cov-report=term-missing -v
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test-report-*.html
          coverage.xml
        retention-days: 30

  test-summary:
    name: Test Summary Report
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      continue-on-error: true
      
    - name: Check job results
      id: check-results
      run: |
        # Check lint job result
        if [ "${{ needs.lint.result }}" == "success" ]; then
          echo "lint_status=✅ Passed" >> $GITHUB_OUTPUT
        else
          echo "lint_status=❌ Failed" >> $GITHUB_OUTPUT
        fi
        
        # Check overall test job result
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "test_status=✅ All Passed" >> $GITHUB_OUTPUT
        elif [ "${{ needs.test.result }}" == "failure" ]; then
          echo "test_status=⚠️ Some Failed" >> $GITHUB_OUTPUT
        else
          echo "test_status=❌ Failed" >> $GITHUB_OUTPUT
        fi
    - name: Generate Test Summary
      run: |
        echo "# 🧪 Multi-Platform Test Results Matrix" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Job Status Overview
        echo "## 🚦 Pipeline Status Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 **Code Quality (Lint)** | ${{ steps.check-results.outputs.lint_status }} | flake8, formatting checks |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 **Multi-Platform Tests** | ${{ steps.check-results.outputs.test_status }} | 15 test combinations |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Create comprehensive matrix table header
        echo "| Platform / Python Version | 3.8 | 3.9 | 3.10 | 3.11 | 3.12 |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------------------|-----|-----|------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        # Function to check status and return appropriate emoji
        get_status() {
          local os_name=$1
          local py_version=$2
          if [ -d "test-results-${os_name}-py${py_version}" ]; then
            echo "✅"
          else
            echo "❌"
          fi
        }
        
        # Generate matrix rows for each OS
        for os in ubuntu-latest windows-latest macos-latest; do
          # Create friendly OS names
          case $os in
            ubuntu-latest) os_display="🐧 Ubuntu Latest" ;;
            windows-latest) os_display="🪟 Windows Latest" ;;
            macos-latest) os_display="🍎 macOS Latest" ;;
          esac
          
          # Build the row
          row="| **${os_display}** |"
          for py in 3.8 3.9 3.10 3.11 3.12; do
            status=$(get_status $os $py)
            row="$row $status |"
          done
          echo "$row" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Legend" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Passed**: All tests completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ❌ **Failed**: Tests failed or did not complete" >> $GITHUB_STEP_SUMMARY
        echo "- 🐧 **Ubuntu**: Latest Ubuntu LTS runner" >> $GITHUB_STEP_SUMMARY
        echo "- 🪟 **Windows**: Latest Windows Server runner" >> $GITHUB_STEP_SUMMARY
        echo "- 🍎 **macOS**: Latest macOS runner" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Test Summary Statistics" >> $GITHUB_STEP_SUMMARY
        
        # Calculate statistics
        total_tests=0
        passed_tests=0
        failed_tests=0
        
        for os in ubuntu-latest windows-latest macos-latest; do
          for py in 3.8 3.9 3.10 3.11 3.12; do
            total_tests=$((total_tests + 1))
            if [ -d "test-results-${os}-py${py}" ]; then
              passed_tests=$((passed_tests + 1))
            else
              failed_tests=$((failed_tests + 1))
            fi
          done
        done
        
        pass_rate=$((passed_tests * 100 / total_tests))
        
        echo "- **Total Test Combinations:** ${total_tests}" >> $GITHUB_STEP_SUMMARY
        echo "- **✅ Passed:** ${passed_tests}" >> $GITHUB_STEP_SUMMARY
        echo "- **❌ Failed:** ${failed_tests}" >> $GITHUB_STEP_SUMMARY
        echo "- **📈 Success Rate:** ${pass_rate}%" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 Detailed Platform Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Architecture | Runner Image | Python Versions Tested |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------------|--------------|-------------------------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🐧 **Ubuntu Latest** | x86_64 | ubuntu-22.04 | 3.8, 3.9, 3.10, 3.11, 3.12 |" >> $GITHUB_STEP_SUMMARY
        echo "| 🪟 **Windows Latest** | x86_64 | windows-2022 | 3.8, 3.9, 3.10, 3.11, 3.12 |" >> $GITHUB_STEP_SUMMARY
        echo "| 🍎 **macOS Latest** | x86_64 | macos-12 | 3.8, 3.9, 3.10, 3.11, 3.12 |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Test Artifacts:** Available in the Actions artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📝 How to Access Detailed Reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Access Links" >> $GITHUB_STEP_SUMMARY
        echo "1. **[📋 Actions Dashboard](https://github.com/KaiTastic/pyASD/actions)** - View all workflow runs" >> $GITHUB_STEP_SUMMARY
        echo "2. **[🔄 This Workflow](https://github.com/KaiTastic/pyASD/actions/workflows/python-package.yml)** - All runs of this workflow" >> $GITHUB_STEP_SUMMARY
        echo "3. **[📖 Main README](https://github.com/KaiTastic/pyASD#compatibility-testing)** - Compatibility testing documentation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### � Artifact Contents" >> $GITHUB_STEP_SUMMARY
        echo "Each test combination generates:" >> $GITHUB_STEP_SUMMARY
        echo "- **HTML Test Report**: Detailed test results with pass/fail status" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Report**: XML format for coverage analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform Info**: OS and Python version details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download Instructions" >> $GITHUB_STEP_SUMMARY
        echo "1. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "2. Scroll down to **'Artifacts'** section" >> $GITHUB_STEP_SUMMARY
        echo "3. Download specific platform reports: \`test-results-{os}-py{version}\`" >> $GITHUB_STEP_SUMMARY
        echo "4. Extract and open \`test-report-*.html\` in your browser" >> $GITHUB_STEP_SUMMARY

  # setup:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: 3.10
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install flake8
  #         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #     - name: Lint with flake8
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  