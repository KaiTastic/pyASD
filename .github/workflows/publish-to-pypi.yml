# This workflow publishes the package to PyPI when a version tag is pushed
# Version number is automatically determined by setuptools-scm from the git tag
# For more information see: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

name: Publish to PyPI (Production Release)

on:
  # Trigger on semantic version tags (e.g., v1.0.0, v1.2.3, v2.0.0-rc1)
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Check if this commit was already tested on TestPyPI
  check-previous-test:
    name: Check if already tested on TestPyPI
    runs-on: ubuntu-latest
    outputs:
      tested_on_testpypi: ${{ steps.check.outputs.tested }}
      testpypi_run_id: ${{ steps.check.outputs.run_id }}
      testpypi_url: ${{ steps.check.outputs.url }}

    steps:
    - name: Check TestPyPI workflow history
      id: check
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        COMMIT_SHA="${{ github.sha }}"
        echo "🔍 Checking if commit $COMMIT_SHA was tested in TestPyPI workflow..."

        # Only accept test results from the last 7 days
        SEVEN_DAYS_AGO=$(date -u -d '7 days ago' +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || date -u -v-7d +%Y-%m-%dT%H:%M:%SZ)

        # Query TestPyPI workflow runs
        TESTPYPI_RUN=$(gh api \
          -H "Accept: application/vnd.github+json" \
          "/repos/${{ github.repository }}/actions/workflows/publish-to-testpypi.yml/runs?status=success&per_page=50" \
          --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .created_at > \"$SEVEN_DAYS_AGO\") | {id: .id, created_at: .created_at, html_url: .html_url}" \
          | head -n 1)

        if [ -n "$TESTPYPI_RUN" ]; then
          RUN_ID=$(echo "$TESTPYPI_RUN" | jq -r '.id')
          CREATED_AT=$(echo "$TESTPYPI_RUN" | jq -r '.created_at')
          HTML_URL=$(echo "$TESTPYPI_RUN" | jq -r '.html_url')

          # Verify that the run included complete test matrix (9 verification jobs)
          echo "📊 Verifying test completeness for run $RUN_ID..."
          VERIFY_JOBS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" \
            --jq '.jobs[] | select(.name | contains("Verify")) | .conclusion')

          SUCCESS_COUNT=$(echo "$VERIFY_JOBS" | grep -c "success" || echo "0")

          if [ "$SUCCESS_COUNT" -ge 9 ]; then
            echo "✅ Found complete TestPyPI test for this commit"
            echo "   Run ID: $RUN_ID"
            echo "   Tested at: $CREATED_AT"
            echo "   Successful jobs: $SUCCESS_COUNT/9"
            echo "   URL: $HTML_URL"
            echo "tested=true" >> $GITHUB_OUTPUT
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
            echo "url=$HTML_URL" >> $GITHUB_OUTPUT
          else
            echo "⚠️  TestPyPI test found but incomplete ($SUCCESS_COUNT/9 jobs passed)"
            echo "   Will run full verification tests"
            echo "tested=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "ℹ️  No recent TestPyPI test found for this commit (or older than 7 days)"
          echo "   Will run full verification tests"
          echo "tested=false" >> $GITHUB_OUTPUT
        fi

  # Build the distribution packages
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full git history needed for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine setuptools-scm

    - name: Show version (from git tag via setuptools-scm)
      run: |
        python -m setuptools_scm
        echo "Building version from tag: ${GITHUB_REF#refs/tags/}"

    - name: Build distribution packages
      run: python -m build

    - name: Check distribution packages
      run: python -m twine check dist/*

    - name: List built packages
      run: ls -lh dist/

    - name: Store distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 7

  # Publish to PyPI (production)
  publish-to-pypi:
    name: Publish to PyPI
    needs: [build]
    runs-on: ubuntu-latest

    # Note: Create 'pypi' environment in GitHub repo Settings > Environments
    # or comment out the environment section and use password instead
    # environment:
    #   name: pypi
    #   url: https://pypi.org/project/pyASDReader/

    permissions:
      id-token: write  # Required for trusted publishing

    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  # Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    needs: [publish-to-pypi]
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to create release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update CITATION.cff version
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        DATE=$(date +%Y-%m-%d)

        if [ -f CITATION.cff ]; then
          sed -i "s/^version: .*/version: ${VERSION}/" CITATION.cff
          sed -i "s/^date-released: .*/date-released: ${DATE}/" CITATION.cff
          echo "Updated CITATION.cff to version ${VERSION}"
        fi

    - name: Extract changelog for this version
      id: changelog
      run: |
        # Extract the section for this version from CHANGELOG.md
        VERSION=${{ steps.get_version.outputs.VERSION }}

        # Read CHANGELOG and extract content for this version
        if [ -f CHANGELOG.md ]; then
          # Use awk to extract the relevant section
          NOTES=$(awk "/## \[${VERSION}\]/,/## \[/{if (/## \[${VERSION}\]/) next; if (/## \[/) exit; print}" CHANGELOG.md | sed '/^$/d')

          if [ -z "$NOTES" ]; then
            NOTES="Release version ${VERSION}"
          fi
        else
          NOTES="Release version ${VERSION}"
        fi

        # Save to file for multiline output
        echo "$NOTES" > release_notes.txt
        echo "NOTES_FILE=release_notes.txt" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body_path: ${{ steps.changelog.outputs.NOTES_FILE }}
        files: |
          dist/*
          CITATION.cff
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-publish verification
  # Optimized: Skip if already tested on TestPyPI, otherwise run full verification
  verify-installation:
    name: Verify PyPI Installation
    needs: [check-previous-test, publish-to-pypi]
    # Only run if not already tested on TestPyPI
    if: needs.check-previous-test.outputs.tested_on_testpypi != 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Test on 3 OS with 3 representative Python versions (9 jobs total)
        # Covers: oldest supported, middle, and latest stable
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.11", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for PyPI to update (120 seconds)
      run: sleep 120
      shell: bash

    - name: Install from PyPI
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyASDReader
      continue-on-error: true

    - name: Retry installation if failed (PyPI might be slow)
      if: failure()
      run: |
        echo "First install attempt failed, waiting 60 more seconds..."
        sleep 60
        python -m pip install pyASDReader

    - name: Verify installation
      run: |
        python -c "from pyASDReader import ASDFile; print('Successfully imported ASDFile')"
        python -c "from pyASDReader import __version__; print(f'Package version: {__version__}')"

    - name: Verify package metadata
      run: |
        python -c 'from importlib.metadata import version, metadata; m = metadata("pyASDReader"); pkg_name = m["Name"]; pkg_home = m["Home-page"]; pkg_ver = version("pyASDReader"); print(f"Package: {pkg_name}"); print(f"Location: {pkg_home}"); print(f"Version: {pkg_ver}")'

  # Verification summary
  verification-summary:
    name: Verification Summary
    needs: [check-previous-test, publish-to-pypi, verify-installation]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Display verification status
      run: |
        if [ "${{ needs.check-previous-test.outputs.tested_on_testpypi }}" == "true" ]; then
          echo "### ✅ Verification Status: REUSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This commit was already fully tested on TestPyPI." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **TestPyPI Run**: [#${{ needs.check-previous-test.outputs.testpypi_run_id }}](${{ needs.check-previous-test.outputs.testpypi_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Matrix**: 9 combinations (3 OS × 3 Python versions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✨ Saved ~45 minutes of GitHub Actions time by reusing tests!" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.verify-installation.result }}" == "success" ]; then
          echo "### ✅ Verification Status: COMPLETED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full verification completed successfully on PyPI." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Matrix**: 9 combinations (3 OS × 3 Python versions)" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Verification Status: SKIPPED/FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Verification was skipped or failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
        fi
