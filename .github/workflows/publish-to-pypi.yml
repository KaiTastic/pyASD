# PyPI Production Release Workflow
#
# Purpose: Automated production deployment with intelligent test optimization
# Testing Strategy:
#   - Conditional Testing: Reuses TestPyPI tests if available (within 7 days)
#   - Complete Matrix: 15 combinations (3 OS × 5 Python versions: 3.8-3.12)
#   - Ensures full coverage of all declared supported Python versions
#
# Resource Optimization:
#   - With test reuse: ~8 min (skips verification)
#   - Without test reuse: ~35 min (runs 15 verification jobs)
#   - Average savings: ~60 min per release with proper workflow
#
# Version number is automatically determined by setuptools-scm from the git tag
# For more information see: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

name: Publish to PyPI (Production Release)

on:
  # Trigger on semantic version tags (e.g., v1.0.0, v1.2.3, v2.0.0-rc1)
  push:
    tags:
      - 'v*.*.*'

# Concurrency control: Prevent multiple releases from running simultaneously
# cancel-in-progress is false to ensure all releases complete (no cancellation)
concurrency:
  group: pypi-production-release
  cancel-in-progress: false

jobs:
  # Verify tag is on main branch
  verify-tag-branch:
    name: Verify tag is on main branch
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Need full history to verify branch ancestry

    - name: Verify tag points to commit on main branch
      run: |
        echo "Verifying tag ${{ github.ref_name }} is on main branch..."

        # Get commit SHA that the tag points to
        TAG_COMMIT=$(git rev-parse ${{ github.ref }})
        echo "Tag commit: $TAG_COMMIT"

        # Fetch main branch
        git fetch origin main

        # Check if tag commit is an ancestor of or on main branch
        if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
          echo "✅ Tag ${{ github.ref_name }} is on main branch"
        elif [ "$TAG_COMMIT" = "$(git rev-parse origin/main)" ]; then
          echo "✅ Tag ${{ github.ref_name }} points to HEAD of main branch"
        else
          echo "❌ ERROR: Tag ${{ github.ref_name }} is NOT on main branch!"
          echo ""
          echo "This tag points to a commit that is not in the main branch history."
          echo "Tags should only be created on the main branch after merging from dev."
          echo ""
          echo "To fix this:"
          echo "  1. Delete the incorrect tag:"
          echo "     git tag -d ${{ github.ref_name }}"
          echo "     git push origin :refs/tags/${{ github.ref_name }}"
          echo ""
          echo "  2. Merge dev to main:"
          echo "     git checkout main"
          echo "     git merge dev"
          echo "     git push origin main"
          echo ""
          echo "  3. Create tag on main branch:"
          echo "     git tag -a ${{ github.ref_name }} -m 'Release ${{ github.ref_name }}'"
          echo "     git push origin ${{ github.ref_name }}"
          exit 1
        fi

  # Check if this commit was already tested on TestPyPI
  check-previous-test:
    name: Check if already tested on TestPyPI
    needs: [verify-tag-branch]  # Only run if tag verification passes
    runs-on: ubuntu-latest
    outputs:
      tested_on_testpypi: ${{ steps.check.outputs.tested }}
      testpypi_run_id: ${{ steps.check.outputs.run_id }}
      testpypi_url: ${{ steps.check.outputs.url }}

    steps:
    - name: Check TestPyPI workflow history
      id: check
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        COMMIT_SHA="${{ github.sha }}"
        echo "🔍 Checking if commit $COMMIT_SHA was tested in TestPyPI workflow..."

        # Accept test results from the last 7 days (balances freshness with reusability)
        SEVEN_DAYS_AGO=$(date -u -d '7 days ago' +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || date -u -v-7d +%Y-%m-%dT%H:%M:%SZ)

        # Query TestPyPI workflow runs
        TESTPYPI_RUN=$(gh api \
          -H "Accept: application/vnd.github+json" \
          "/repos/${{ github.repository }}/actions/workflows/publish-to-testpypi.yml/runs?status=success&per_page=50" \
          --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .created_at > \"$SEVEN_DAYS_AGO\") | {id: .id, created_at: .created_at, html_url: .html_url}" \
          | head -n 1)

        if [ -n "$TESTPYPI_RUN" ]; then
          RUN_ID=$(echo "$TESTPYPI_RUN" | jq -r '.id')
          CREATED_AT=$(echo "$TESTPYPI_RUN" | jq -r '.created_at')
          HTML_URL=$(echo "$TESTPYPI_RUN" | jq -r '.html_url')

          # Verify that the run included complete test matrix (15 verification jobs)
          echo "📊 Verifying test completeness for run $RUN_ID..."
          VERIFY_JOBS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" \
            --jq '.jobs[] | select(.name | contains("Verify")) | .conclusion')

          SUCCESS_COUNT=$(echo "$VERIFY_JOBS" | grep -c "success" || echo "0")

          if [ "$SUCCESS_COUNT" -ge 15 ]; then
            echo "✅ Found complete TestPyPI test for this commit"
            echo "   Run ID: $RUN_ID"
            echo "   Tested at: $CREATED_AT"
            echo "   Successful jobs: $SUCCESS_COUNT/15"
            echo "   URL: $HTML_URL"
            echo "tested=true" >> $GITHUB_OUTPUT
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
            echo "url=$HTML_URL" >> $GITHUB_OUTPUT
          else
            echo "⚠️  TestPyPI test found but incomplete ($SUCCESS_COUNT/15 jobs passed)"
            echo "   Will run full verification tests"
            echo "tested=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "ℹ️  No recent TestPyPI test found for this commit (or older than 7 days)"
          echo "   Will run full verification tests"
          echo "tested=false" >> $GITHUB_OUTPUT
        fi

  # Build the distribution packages
  build:
    name: Build distribution packages
    needs: [verify-tag-branch]  # Only build if tag verification passes
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code with full history
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full git history needed for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine setuptools-scm

    - name: Show version (from git tag via setuptools-scm)
      run: |
        python -m setuptools_scm
        echo "Building version from tag: ${GITHUB_REF#refs/tags/}"

    - name: Build distribution packages
      run: python -m build

    - name: Check distribution packages
      run: python -m twine check dist/*

    - name: List built packages
      run: ls -lh dist/

    - name: Store distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 7

  # Publish to PyPI (production)
  publish-to-pypi:
    name: Publish to PyPI
    needs: [build]
    runs-on: ubuntu-latest

    # GitHub Environment Protection (ENABLED for production safety)
    # Provides manual approval gate for production releases
    #
    # Setup required (one-time):
    #   1. Go to Settings > Environments > New environment
    #   2. Name: pypi-production
    #   3. Add required reviewers (at least 1 person)
    #   4. Optional: Add 5-minute wait timer
    #   5. Deployment branches: Only main
    #
    # This ensures that production releases require manual approval before publishing to PyPI
    #
    environment:
      name: pypi-production
      url: https://pypi.org/project/pyASDReader/

    permissions:
      id-token: write  # Required for trusted publishing

    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        # Using OIDC Trusted Publishing (no password needed)
        # Configure at: https://pypi.org/manage/project/pyASDReader/settings/publishing/

  # Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    needs: [publish-to-pypi]
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to create release

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update CITATION.cff version
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        DATE=$(date +%Y-%m-%d)

        if [ -f CITATION.cff ]; then
          sed -i "s/^version: .*/version: ${VERSION}/" CITATION.cff
          sed -i "s/^date-released: .*/date-released: ${DATE}/" CITATION.cff
          echo "Updated CITATION.cff to version ${VERSION}"
        fi

    - name: Extract changelog for this version
      id: changelog
      run: |
        # Extract the section for this version from CHANGELOG.md
        VERSION=${{ steps.get_version.outputs.VERSION }}

        # Read CHANGELOG and extract content for this version
        if [ -f CHANGELOG.md ]; then
          # Use awk to extract the relevant section
          NOTES=$(awk "/## \[${VERSION}\]/,/## \[/{if (/## \[${VERSION}\]/) next; if (/## \[/) exit; print}" CHANGELOG.md | sed '/^$/d')

          if [ -z "$NOTES" ]; then
            NOTES="Release version ${VERSION}"
          fi
        else
          NOTES="Release version ${VERSION}"
        fi

        # Save to file for multiline output
        echo "$NOTES" > release_notes.txt
        echo "NOTES_FILE=release_notes.txt" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body_path: ${{ steps.changelog.outputs.NOTES_FILE }}
        files: |
          dist/*
          CITATION.cff
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-publish verification
  # Optimized: Skip if already tested on TestPyPI, otherwise run full verification
  verify-installation:
    name: Verify PyPI Installation
    needs: [check-previous-test, publish-to-pypi]
    # Only run if not already tested on TestPyPI
    if: needs.check-previous-test.outputs.tested_on_testpypi != 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Test on 3 OS with all 5 supported Python versions (15 jobs total)
        # Ensures complete coverage matching TestPyPI verification
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for PyPI package availability (API-based check)
      run: |
        echo "Checking PyPI for package availability via JSON API..."
        MAX_ATTEMPTS=30
        ATTEMPT=0
        SLEEP_INTERVAL=10

        # Extract version from tag (remove 'v' prefix)
        VERSION="${GITHUB_REF#refs/tags/v}"
        echo "Looking for version: $VERSION"

        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Querying PyPI API..."

          # Query PyPI JSON API (faster and more reliable than pip index)
          HTTP_CODE=$(curl -s -o /tmp/pypi_response.json -w "%{http_code}" \
            https://pypi.org/pypi/pyASDReader/json)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Package exists on PyPI"

            # Verify the specific version we just published is available
            if grep -q "\"$VERSION\"" /tmp/pypi_response.json; then
              echo "✅ Version $VERSION confirmed available"
              break
            else
              echo "⚠️ Package exists but version $VERSION not yet indexed"
            fi
          else
            echo "Package not yet available (HTTP $HTTP_CODE)"
          fi

          if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            echo "Waiting ${SLEEP_INTERVAL}s before retry..."
            sleep $SLEEP_INTERVAL
          else
            echo "⚠️ Max attempts reached, proceeding with installation..."
          fi
        done

        rm -f /tmp/pypi_response.json
      shell: bash

    - name: Install from PyPI
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyASDReader

    - name: Verify installation
      run: |
        python -c "from pyASDReader import ASDFile; print('✓ Successfully imported ASDFile')"
        python -c "from pyASDReader import __version__; print(f'✓ Package version: {__version__}')"

    - name: Smoke test - Basic functionality
      run: |
        python << 'PYTHON_SCRIPT'
        from pyASDReader import ASDFile
        import re

        # Test 1: ASDFile class exists and has expected methods
        assert hasattr(ASDFile, '__init__'), "ASDFile should have __init__"
        print("✓ ASDFile class structure valid")

        # Test 2: Version format is valid (semantic versioning)
        from pyASDReader import __version__
        assert re.match(r'^\d+\.\d+\.\d+', __version__), f"Version should be semver format, got: {__version__}"
        print(f"✓ Version format valid: {__version__}")

        # Test 3: Key modules are importable
        try:
            from pyASDReader import constant
            from pyASDReader import file_attributes
            print("✓ Core modules importable")
        except ImportError as e:
            print(f"✗ Import error: {e}")
            raise

        print("\n✅ All smoke tests passed!")
        PYTHON_SCRIPT

    - name: Verify package metadata
      run: |
        python -c 'from importlib.metadata import version, metadata; m = metadata("pyASDReader"); pkg_name = m["Name"]; pkg_home = m["Home-page"]; pkg_ver = version("pyASDReader"); print(f"Package: {pkg_name}"); print(f"Location: {pkg_home}"); print(f"Version: {pkg_ver}")'

  # Verification summary
  verification-summary:
    name: Verification Summary
    needs: [check-previous-test, publish-to-pypi, verify-installation]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Display verification status
      run: |
        if [ "${{ needs.check-previous-test.outputs.tested_on_testpypi }}" == "true" ]; then
          echo "### ✅ Verification Status: REUSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This commit was already fully tested on TestPyPI." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **TestPyPI Run**: [#${{ needs.check-previous-test.outputs.testpypi_run_id }}](${{ needs.check-previous-test.outputs.testpypi_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Matrix**: 15 combinations (3 OS × 5 Python versions: 3.8-3.12)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✨ Saved ~60 minutes of GitHub Actions time by reusing tests!" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.verify-installation.result }}" == "success" ]; then
          echo "### ✅ Verification Status: COMPLETED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full verification completed successfully on PyPI." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Matrix**: 15 combinations (3 OS × 5 Python versions: 3.8-3.12)" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Verification Status: SKIPPED/FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Verification was skipped or failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
        fi

  # Handle verification failures
  handle-verification-failure:
    name: Handle Verification Failure
    needs: [verify-installation]
    if: failure() && needs.verify-installation.result == 'failure'
    runs-on: ubuntu-latest

    permissions:
      issues: write  # Required to create issues

    steps:
    - name: Extract version from tag
      id: version
      run: |
        VERSION="${GITHUB_REF#refs/tags/v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Create failure notification issue
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.version.outputs.version }}';
          const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

          const body = `## ⚠️ PyPI Release Verification Failed

          **Version**: \`${version}\`
          **Tag**: \`${context.ref}\`
          **Workflow Run**: [View Details](${runUrl})

          ### Issue

          The verification tests failed after publishing to PyPI. The package was published but failed post-release validation.

          ### Impact

          - ❌ Package \`pyASDReader ${version}\` is live on PyPI but may have issues
          - ⚠️ Users can install this version, but it may not work correctly
          - 🔍 Immediate investigation required

          ### Recommended Actions

          1. **Investigate the failure**:
             - Review the [workflow logs](${runUrl})
             - Identify which verification tests failed
             - Determine if the issue is critical

          2. **If the issue is critical**:
             \`\`\`bash
             # Yank the problematic version from PyPI
             pip install twine
             twine yank pyASDReader ${version} -m "Failed post-release verification"
             \`\`\`

          3. **If the issue is minor**:
             - Document the known issue
             - Prepare a patch release

          4. **Verify locally**:
             \`\`\`bash
             # Test installation from PyPI
             pip install pyASDReader==${version}
             python -c "from pyASDReader import ASDFile; print('Import successful')"
             \`\`\`

          ### Next Steps

          - [ ] Investigate workflow failure logs
          - [ ] Reproduce issue locally
          - [ ] Decide: Yank version or document known issue
          - [ ] Prepare fix if needed

          ---
          *This issue was automatically created by the PyPI release workflow.*
          `;

          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'release-failure'
          });

          const existingIssue = issues.data.find(issue =>
            issue.title.includes(version)
          );

          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `🔄 Verification failed again for version ${version}.\n\n[Latest workflow run](${runUrl})`
            });
            console.log(`Updated existing issue #${existingIssue.number}`);
          } else {
            // Create new issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `⚠️ Release Verification Failed: v${version}`,
              body: body,
              labels: ['release-failure', 'urgent', 'bug']
            });
            console.log(`Created new issue #${issue.data.number}`);
          }

    - name: Send notification summary
      run: |
        echo "## ⚠️ Verification Failure Alert" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Version ${{ steps.version.outputs.version }} was published to PyPI but failed verification." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "A GitHub issue has been created for tracking." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**IMPORTANT**: Consider yanking this version if the issue is critical." >> $GITHUB_STEP_SUMMARY
